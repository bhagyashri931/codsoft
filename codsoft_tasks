Task 1 : To do list
class ToDoList:
    def __init__(self):
        self.tasks = []

    def add_task(self, task):
        self.tasks.append({'task': task, 'completed': False})

    def update_task(self, task_id, new_task):
        if 0 <= task_id < len(self.tasks):
            self.tasks[task_id]['task'] = new_task
        else:
            print("Task not found")

    def delete_task(self, task_id):
        if 0 <= task_id < len(self.tasks):
            del self.tasks[task_id]
        else:
            print("Task not found")

    def mark_complete(self, task_id):
        if 0 <= task_id < len(self.tasks):
            self.tasks[task_id]['completed'] = True
        else:
            print("Task not found")

    def view_tasks(self):
        for i, task in enumerate(self.tasks):
            status = "Done" if task['completed'] else "Pending"
            print(f"{i + 1}. {task['task']} [{status}]")

def main():
    todo_list = ToDoList()

    while True:
        print("\n1. Add task")
        print("2. Update task")
        print("3. Delete task")
        print("4. View tasks")
        print("5. Mark task as complete")
        print("6. Exit")

        choice = input("Choose an option: ")

        if choice == "1":
            task = input("Enter a task: ")
            todo_list.add_task(task)
        elif choice == "2":
            try:
                task_id = int(input("Enter the task ID: ")) - 1
                new_task = input("Enter the new task: ")
                todo_list.update_task(task_id, new_task)
            except ValueError:
                print("Invalid input. Please enter a number.")
        elif choice == "3":
            try:
                task_id = int(input("Enter the task ID: ")) - 1
                todo_list.delete_task(task_id)
            except ValueError:
                print("Invalid input. Please enter a number.")
        elif choice == "4":
            todo_list.view_tasks()
        elif choice == "5":
            try:
                task_id = int(input("Enter the task ID: ")) - 1
                todo_list.mark_complete(task_id)
            except ValueError:
                print("Invalid input. Please enter a number.")
        elif choice == "6":
            break
        else:
            print("Invalid choice")

if __name__ == "__main__":
    main()



Task 2: Calculator
def calculator():
    while True:
        try:
            num1 = float(input("Enter first number: "))
            num2 = float(input("Enter second number: "))
            operation = input("Choose operation (+, -, *, /): ")

            if operation == '+':
                result = num1 + num2
            elif operation == '-':
                result = num1 - num2
            elif operation == '*':
                result = num1 * num2
            elif operation == '/':
                if num2 != 0:
                    result = num1 / num2
                else:
                    print("Error: Division by zero.")
                    continue
            else:
                print("Invalid operation. Please try again.")
                continue

            print(f"Result: {result}")
        except ValueError:
            print("Invalid input. Please enter numeric values.")

        again = input("Do you want to perform another calculation? (yes/no): ")
        if again.lower() != 'yes':
            break

if __name__ == "__main__":
    calculator()



Task 3: Password generator
import random
import string

def generate_password(length):
    characters = string.ascii_letters + string.digits + string.punctuation
    password = ''.join(random.choice(characters) for _ in range(length))
    return password

def main():
    while True:
        try:
            length = int(input("Enter the desired length for the password: "))
            if length <= 0:
                print("Please enter a positive number.")
                continue

            password = generate_password(length)
            print(f"Generated password: {password}")
        except ValueError:
            print("Invalid input. Please enter a numeric value.")

        again = input("Do you want to generate another password? (yes/no): ")
        if again.lower() != 'yes':
            break

if __name__ == "__main__":
    main()



Task 4: Rock-Paper-Scissors Game
import random

def get_computer_choice():
    return random.choice(['rock', 'paper', 'scissors'])

def determine_winner(user_choice, computer_choice):
    if user_choice == computer_choice:
        return "It's a tie!"
    elif (user_choice == 'rock' and computer_choice == 'scissors') or \
         (user_choice == 'scissors' and computer_choice == 'paper') or \
         (user_choice == 'paper' and computer_choice == 'rock'):
        return "You win!"
    else:
        return "You lose!"

def main():
    while True:
        user_choice = input("Choose rock, paper, or scissors: ").lower()
        if user_choice not in ['rock', 'paper', 'scissors']:
            print("Invalid choice. Please try again.")
            continue

        computer_choice = get_computer_choice()
        print(f"Computer chose: {computer_choice}")
        result = determine_winner(user_choice, computer_choice)
        print(result)

        again = input("Do you want to play again? (yes/no): ")
        if again.lower() != 'yes':
            break

if __name__ == "__main__":
    main()



Task 5: Contact book
class ContactBook:
    def __init__(self):
        self.contacts = []

    def add_contact(self, name, phone, email, address):
        self.contacts.append({'name': name, 'phone': phone, 'email': email, 'address': address})

    def view_contacts(self):
        for i, contact in enumerate(self.contacts):
            print(f"{i + 1}. {contact['name']} - {contact['phone']}")

    def search_contact(self, search_term):
        results = [contact for contact in self.contacts if search_term.lower() in contact['name'].lower() or search_term in contact['phone']]
        for result in results:
            print(result)

    def update_contact(self, index, name=None, phone=None, email=None, address=None):
        if 0 <= index < len(self.contacts):
            if name:
                self.contacts[index]['name'] = name
            if phone:
                self.contacts[index]['phone'] = phone
            if email:
                self.contacts[index]['email'] = email
            if address:
                self.contacts[index]['address'] = address

    def delete_contact(self, index):
        if 0 <= index < len(self.contacts):
            self.contacts.pop(index)

def main():
    contact_book = ContactBook()
    while True:
        print("\n1. Add Contact\n2. View Contacts\n3. Search Contact\n4. Update Contact\n5. Delete Contact\n6. Exit")
        choice = input("Choose an option: ")
        if choice == '1':
            name = input("Enter name: ")
            phone = input("Enter phone number: ")
            email = input("Enter email: ")
            address = input("Enter address: ")
            contact_book.add_contact(name, phone, email, address)
        elif choice == '2':
            contact_book.view_contacts()
        elif choice == '3':
            search_term = input("Enter name or phone number to search: ")
            contact_book.search_contact(search_term)
        elif choice == '4':
            index = int(input("Enter contact number to update: ")) - 1
            name = input("Enter new name (leave blank to keep current): ")
            phone = input("Enter new phone number (leave blank to keep current): ")
            email = input("Enter new email (leave blank to keep current): ")
            address = input("Enter new address (leave blank to keep current): ")
            contact_book.update_contact(index, name, phone, email, address)
        elif choice == '5':
            index = int(input("Enter contact number to delete: ")) - 1
            contact_book.delete_contact(index)
        elif choice == '6':
            break
        else:
            print("Invalid option. Please try again.")

if __name__ == "__main__":
    main()


